{"version":3,"sources":["components/Titles.js","components/Form.js","components/Info.js","App.js","serviceWorker.js","index.js"],"names":["Titles","react_default","a","createElement","Typography","style","display","variant","gutterBottom","Box","fontWeight","Form","props","FormControl","onSubmit","getWeather","Paper","className","InputBase","type","name","placeholder","pStyle","margin","Info","Grid","container","spacing","item","xs","Divider","city","country","fontSize","textAlign","sm","temperature","align","component","humidity","temp_min","temp_max","icon","description","API_KEY","App","state","undefined","error","_callee","e","api_call","data","regenerator_default","wrap","_context","prev","next","preventDefault","target","elements","value","fetch","concat","sent","json","_this","setState","main","temp","sys","weather","stop","md","components_Titles","components_Form","this","components_Info","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uRAaeA,EATA,kBACdC,EAAAC,EAAAC,cAAA,WACCF,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAYC,MAAO,CAAEC,QAAS,eAAiBC,QAAQ,KAAKD,QAAQ,QAAQE,cAAY,GACvFP,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAKC,WAAW,mBAAhB,gBADD,IAEsBT,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAKC,WAAW,oBAAmBT,EAAAC,EAAAC,cAAA,QAAMI,QAAQ,MAAd,eACzDN,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAYG,QAAQ,UAAUD,QAAQ,QAAQE,cAAY,GAA1D,8ECOaG,EAbF,SAAAC,GAAK,OACjBX,EAAAC,EAAAC,cAACU,EAAA,EAAD,KACAZ,EAAAC,EAAAC,cAAA,QAAMW,SAAUF,EAAMG,YACrBd,EAAAC,EAAAC,cAACa,EAAA,EAAD,CAAOC,UAAU,YACjBhB,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAYG,QAAQ,MAAMN,EAAAC,EAAAC,cAACe,EAAA,EAAD,CAAWC,KAAK,OAAOC,KAAK,OAAOC,YAAY,UAEzEpB,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAYG,QAAQ,MAAMN,EAAAC,EAAAC,cAACe,EAAA,EAAD,CAAWC,KAAK,OAAOC,KAAK,UAAUC,YAAY,aAC5EpB,EAAAC,EAAAC,cAAA,UAAQc,UAAU,gBAAlB,8BCPIK,EAAS,CACXC,OAAQ,aAkEGC,EA/DF,SAAAZ,GAAK,OAGjBX,EAAAC,EAAAC,cAAA,OAAKc,UAAU,QAChBhB,EAAAC,EAAAC,cAACsB,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,GACjB1B,EAAAC,EAAAC,cAACsB,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,IACf5B,EAAAC,EAAAC,cAAC2B,EAAA,EAAD,MAELlB,EAAMmB,MAAQnB,EAAMoB,SAAW/B,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAKwB,SAAS,cAAcvB,WAAW,mBAAmBwB,UAAU,UAApE,IAA8EjC,EAAAC,EAAAC,cAAA,SAC5GF,EAAAC,EAAAC,cAAA,gBAASS,EAAMmB,KAAf,KAAyBnB,EAAMoB,UADD,MAM1B/B,EAAAC,EAAAC,cAACsB,EAAA,EAAD,CAAOG,MAAI,EAACC,GAAI,GAAIM,GAAI,GAE7BvB,EAAMwB,aAAenC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAYE,QAAQ,SAAS+B,MAAM,SAAS9B,QAAQ,KAAK+B,UAAU,GAAGL,SAAU,IAAhF,IAAqFhC,EAAAC,EAAAC,cAAA,KAAGE,MAAOiB,GACnHrB,EAAAC,EAAAC,cAAA,gBAASS,EAAMwB,YAAf,KACAnC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAYE,QAAQ,SAASC,QAAQ,aAArC,WAFoB,MAOhBN,EAAAC,EAAAC,cAACsB,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAIM,GAAI,GAE5BvB,EAAM2B,UAAYtC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAYG,QAAQ,MAAKN,EAAAC,EAAAC,cAAA,KAAGE,MAAOiB,GAAV,aAC1CrB,EAAAC,EAAAC,cAAA,gBAASS,EAAM2B,SAAf,KAD0C,MAAzB,KAIRtC,EAAAC,EAAAC,cAACsB,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAIM,GAAI,GAEjCvB,EAAM4B,UAAYvC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAYG,QAAQ,MAAKN,EAAAC,EAAAC,cAAA,iBAC1CF,EAAAC,EAAAC,cAAA,gBAAUS,EAAM4B,SAAhB,KAD0C,UAAzB,MAMbvC,EAAAC,EAAAC,cAACsB,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAIM,GAAI,GAE5BvB,EAAM6B,UAAYxC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAYG,QAAQ,MAApB,KAA2BN,EAAAC,EAAAC,cAAA,kBAC5CF,EAAAC,EAAAC,cAAA,gBAAUS,EAAM6B,SAAhB,KAD4C,UAA3B,KAMlB7B,EAAM8B,MAAQzC,EAAAC,EAAAC,cAAA,kBACbF,EAAAC,EAAAC,cAAA,iDAA0CS,EAAM8B,KAAhD,WAKIzC,EAAAC,EAAAC,cAACsB,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAGM,GAAI,GAE3BvB,EAAM+B,aAAe1C,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAYiC,MAAM,SAAS9B,QAAQ,YAAY+B,UAAU,MAAzD,IAA+DrC,EAAAC,EAAAC,cAAA,mBACnFF,EAAAC,EAAAC,cAAA,gBAAUS,EAAM+B,YAAhB,MADoB,SCpDlBC,EAAU,mCAqFDC,6MAlFbC,MAAQ,CACNV,iBAAaW,EACbhB,UAAMgB,EACNf,aAASe,EACTR,cAAUQ,EACVJ,iBAAaI,EACbP,cAAUO,EACVN,cAAUM,EACVL,UAAMK,EACNC,WAAOD,KAEThC,iDAAa,SAAAkC,EAAOC,GAAP,IAAAnB,EAAAC,EAAAmB,EAAAC,EAAA,OAAAC,EAAAnD,EAAAoD,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cACXP,EAAEQ,iBACI3B,EAAOmB,EAAES,OAAOC,SAAS7B,KAAK8B,MAC9B7B,EAAUkB,EAAES,OAAOC,SAAS5B,QAAQ6B,MAH/BN,EAAAE,KAAA,EAIYK,MAAK,oDAAAC,OAAqDhC,EAArD,KAAAgC,OAA6D/B,EAA7D,WAAA+B,OAA8EnB,EAA9E,kBAJjB,cAILO,EAJKI,EAAAS,KAAAT,EAAAE,KAAA,EAKQN,EAASc,OALjB,OAKLb,EALKG,EAAAS,KAMPjC,GAAQC,GACVkC,EAAKC,SAAS,CACZ/B,YAAagB,EAAKgB,KAAKC,KACvBtC,KAAMqB,EAAKhC,KACXY,QAASoB,EAAKkB,IAAItC,QAClBO,SAAUa,EAAKgB,KAAK7B,SACpBI,YAAaS,EAAKmB,QAAQ,GAAG5B,YAC7BH,SAAUY,EAAKgB,KAAK5B,SACpBC,SAAUW,EAAKgB,KAAK3B,SACpBC,KAAMU,EAAKmB,QAAQ,GAAG7B,KACtBM,MAAO,KAEMI,EAAKmB,QAAQ,GAAG7B,MAE/BwB,EAAKC,SAAS,CACZ/B,iBAAaW,EACbhB,UAAMgB,EACNf,aAASe,EACTR,cAAUQ,EACVJ,iBAAaI,EACbP,cAAUO,EACVN,cAAUM,EACVL,UAAMK,EACNC,MAAO,6BA7BA,yBAAAO,EAAAiB,SAAAvB,oIAkCX,OACEhD,EAAAC,EAAAC,cAAA,OAAKc,UAAU,OAEThB,EAAAC,EAAAC,cAACa,EAAA,EAAD,CAAOC,UAAU,SACbhB,EAAAC,EAAAC,cAACsB,EAAA,EAAD,CAAMC,WAAS,GACXzB,EAAAC,EAAAC,cAACsB,EAAA,EAAD,CAAMgD,GAAG,KACbxE,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACuE,EAAD,QAIFzE,EAAAC,EAAAC,cAACsB,EAAA,EAAD,CAAMgD,GAAG,KACTxE,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACwE,EAAD,CAAM5D,WAAY6D,KAAK7D,gBAIzBd,EAAAC,EAAAC,cAAC0E,EAAD,CAAM5D,UAAU,UAEZmB,YAAawC,KAAK9B,MAAMV,YACxBG,SAAUqC,KAAK9B,MAAMP,SACrBR,KAAM6C,KAAK9B,MAAMf,KACjBC,QAAS4C,KAAK9B,MAAMd,QACpBW,YAAaiC,KAAK9B,MAAMH,YACxBH,SAAUoC,KAAK9B,MAAMN,SACrBC,SAAUmC,KAAK9B,MAAML,SACrBC,KAAMkC,KAAK9B,MAAMJ,KACjBM,MAAO4B,KAAK9B,MAAME,iBAzEpB8B,IAAMC,WCEJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOrF,EAAAC,EAAAC,cAACoF,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.2f932906.chunk.js","sourcesContent":["import React from \"react\";\nimport { Typography, Box } from '@material-ui/core';\n\n\nconst Titles = () => (\n\t<div>\n\t\t<Typography style={{ display: 'inline-flex' }} variant=\"h3\" display=\"block\" gutterBottom>\n\t\t\t<Box fontWeight=\"fontWeightLight\">\n\t\t\tWeather &nbsp;</Box> <Box fontWeight=\"fontWeightMedium\"><span variant=\"h3\">Forecast </span></Box></Typography>\n\t\t<Typography variant=\"caption\" display=\"block\" gutterBottom>Search to find temperature, humidity and more...</Typography>\n\t</div>\n);\n\nexport default Titles;","import React from \"react\";\nimport { Paper, InputBase, FormControl, Typography } from '@material-ui/core';\n\nconst Form = props => (\n\t<FormControl>\n\t<form onSubmit={props.getWeather}>\n\t\t<Paper className=\"inputbar\">\n\t\t<Typography variant=\"h6\" ><InputBase type=\"text\" name=\"city\" placeholder=\"City\"/></Typography>\n\t\t\n\t\t<Typography variant=\"h6\" ><InputBase type=\"text\" name=\"country\" placeholder=\"Country\"/></Typography>\n\t\t<button className=\"btn btn-grad\">Search</button>\n\t\t</Paper>\t\n\t</form>\n\t</FormControl>\n);\n\nexport default Form;","import React from \"react\";\nimport { Grid, Box, Typography, Divider } from '@material-ui/core';\n\nconst pStyle = {\n    margin: '20px auto'\n  };\n\nconst Info = props => (\n\n\t\n\t<div className=\"card\">\n<Grid container spacing={0}>\n        <Grid item xs={12}>\n        <Divider />\n        {\n\t \tprops.city && props.country && <Box fontSize=\"h4.fontSize\" fontWeight=\"fontWeightMedium\" textAlign=\"center\"> <p>\n\t \t\t<span> { props.city }, { props.country }</span>\n\t \t</p> </Box>\n\t } \n        </Grid>\n\n        <Grid  item xs={12} sm={6}>\n        { \t\n\t \tprops.temperature && <Typography display=\"inline\" align=\"center\" variant=\"h1\" component=\"\" fontSize={32}> <p style={pStyle}>\n\t \t\t<span> { props.temperature }\t</span>\n\t\t\t <Typography display=\"inline\" variant=\"subtitle1\">&#8451;</Typography>\n\t \t</p> </Typography>\n\t }\n        </Grid>\n\n        <Grid item xs={12} sm={6}>\n        { \t\n\t \tprops.humidity && <Typography variant=\"h6\"><p style={pStyle}> Humidity: \n\t \t\t<span> { props.humidity } </span> %\n\t \t</p> </Typography> \n     }\n             <Grid item xs={12} sm={6}>\n        { \t\n\t \tprops.temp_min && <Typography variant=\"h6\"><p> Low: \n\t \t\t<span > { props.temp_min } </span>\n\t\t\t &#8451;\n\t </p> </Typography> \n\t }\n        </Grid>\n        <Grid item xs={12} sm={6}>\n        { \t\n\t \tprops.temp_max && <Typography variant=\"h6\">  <p> High: \n\t \t\t<span > { props.temp_max } </span>\n\t\t\t &#8451;\n\t </p> </Typography>\n\t }\n\t { \t\n\t \tprops.icon && <p> icon: \n\t \t\t<span> http://openweathermap.org/img/w/ { props.icon}.png</span>\n\t </p> \n\t }\n        </Grid>\n        </Grid>\n        <Grid item xs={6} sm={6}>\n        { \t\n\t \tprops.description && <Typography align=\"center\" variant=\"subtitle2\" component=\"h6\"> <p> Expect\n\t \t\t<span > { props.description } </span>\n\t </p> </Typography>\n\t }\n        </Grid>\n      </Grid>\n\t</div>\n\t\n);\n\nexport default Info;","import React from \"react\";\n\nimport Titles from \"./components/Titles\";\nimport Form from \"./components/Form\";\nimport Info from \"./components/Info\";\nimport { Paper, Grid } from '@material-ui/core';\n\n\nconst API_KEY = \"f02891b19cc75981601c2fc1e4023de2\";\n\nclass App extends React.Component {\n  state = {\n    temperature: undefined,\n    city: undefined,\n    country: undefined,\n    humidity: undefined,\n    description: undefined,\n    temp_min: undefined,\n    temp_max: undefined,\n    icon: undefined,\n    error: undefined\n  }\n  getWeather = async (e) => {\n    e.preventDefault();\n    const city = e.target.elements.city.value;\n    const country = e.target.elements.country.value;\n    const api_call = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}&units=metric`);\n    const data = await api_call.json();\n    if (city && country) {\n      this.setState({\n        temperature: data.main.temp,\n        city: data.name,\n        country: data.sys.country,\n        humidity: data.main.humidity,\n        description: data.weather[0].description,\n        temp_min: data.main.temp_min,\n        temp_max: data.main.temp_max,\n        icon: data.weather[0].icon,\n        error: \"\"\n      });\n      var iconCode = data.weather[0].icon;\n    } else {\n      this.setState({\n        temperature: undefined,\n        city: undefined,\n        country: undefined,\n        humidity: undefined,\n        description: undefined,\n        temp_min: undefined,\n        temp_max: undefined,\n        icon: undefined,\n        error: \"Please enter the values.\"\n      });\n    }\n  }\n  render() {\n    return (\n      <div className=\"App\">\n\n            <Paper className=\"board\">\n                <Grid container>\n                    <Grid md=\"7\">\n                <div>\n                  <Titles />\n                </div>\n                </Grid>\n\n                <Grid md=\"5\">\n                <div>\n                  <Form getWeather={this.getWeather} />\n                </div>\n                </Grid>\n                </Grid>\n                <Info className=\"weather\"\n\n                    temperature={this.state.temperature} \n                    humidity={this.state.humidity}\n                    city={this.state.city}\n                    country={this.state.country}\n                    description={this.state.description}\n                    temp_min={this.state.temp_min}\n                    temp_max={this.state.temp_max}\n                    icon={this.state.icon}\n                    error={this.state.error}\n\n                  />\n                </Paper>\n                \n      </div>\n    );\n  }\n};\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport \"./App.css\";\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}